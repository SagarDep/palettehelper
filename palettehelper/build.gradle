buildscript {
    ext.kotlin_version = '1.0.0-beta-4589'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.ben-manes.versions'

def String retrieveProp(String key) {
    try {
        Properties props = new Properties()
        props.load(new FileInputStream("private.props"))
        def val = props.getProperty(key)
        return val
    } catch (FileNotFoundException ignored) {
        return ''
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "io.sweers.palettehelper"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 12
        versionName "2.0.0"

        renderscriptTargetApi 15
        renderscriptSupportModeEnabled true

        buildConfigField "String", "BUGSNAG_KEY", "\"${retrieveProp('BUGSNAG_KEY')}\""
        buildConfigField "String", "ANALYTICS_KEY", "\"${retrieveProp('ANALYTICS_KEY')}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile new File(retrieveProp('KEYSTORE_LOC'))
            keyAlias retrieveProp('KEYSTORE_ALIAS')
            storePassword "placeholder"
            keyPassword "placeholder"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

// Get the task graph and assign the signingConfig password if it's a Release buildType
//noinspection GroovyAssignabilityCheck
gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks().collect {it.getName()}
    if (tasks.any{it.contains('Release')}) {
        def pass = getPassword()
        android.signingConfigs.release.storePassword = pass
        android.signingConfigs.release.keyPassword = pass
    }
}

def getPassword() {
    println "Requesting password from keychain"
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    def keychainExec = exec {
        commandLine 'security', '-q', 'find-generic-password', '-ga', "release-keystore-palette-helper"
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    if (keychainExec.exitValue != 0) {
        println stdout.toString()
        println stderr.toString()
        return null
    }
    (stderr.toString().trim() =~ /password: "(.*)"/)[0][1]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-android-sdk-annotations:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    def supportLibraryVersion = '23.1.1'
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:palette-v7:$supportLibraryVersion"
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"

    def playServicesVersion = '8.4.0'
    compile "com.google.android.gms:play-services-base:$playServicesVersion"
    compile "com.google.android.gms:play-services-gcm:$playServicesVersion"

    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.github.bumptech.glide:okhttp-integration:1.3.1@aar'
    compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }
    compile 'com.bugsnag:bugsnag-android:3.3.0'
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'
    compile 'io.sweers.rxpalette:rxpalette-kotlin:0.2.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava-math:1.0.0'
    compile "com.mixpanel.android:mixpanel-android:4.7.0"
    compile 'com.squareup.okhttp:okhttp:2.7.2'
    compile 'com.github.chrisbanes.photoview:library:1.2.4'

    def barberVersion = '1.4.0-SNAPSHOT'
    apt "io.sweers.barber:barber-compiler:$barberVersion"
    compile "io.sweers.barber:barber-api:$barberVersion"

    def leakCanaryVersion = '1.4-SNAPSHOT'
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
}
